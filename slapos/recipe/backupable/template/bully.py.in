#!%(executable)s

import select
import socket
import threading
import time
import sys
import random

sys.path[:]=%(syspath)s

from slapos import slap as slapmodule

print'\n\n\n ################### STARTING ################### \n\n\n'

# IPV6 addresses for each one
server_list = [
    (0, '%(ip0)s'),
    (1, '%(ip1)s'),
    (2, '%(ip2)s)')]

port = 50000
master_id = 0
size = 1024
self_id = %(me)s

def election():
  global master_id
  message = "%%s, %%s" %% (self_id, "Election")
  victory = True
  for (remote_id, addr) in server_list:
    if remote_id > self_id:
      try:
        s = socket.socket(socket.AF_INET6, socket.SOCK_STREAM)
        s.connect((addr, port))
        s.send(message)
        reply = s.recv(size)
        if reply == "%%s, %%s" %% (remote_id, "Alive"):
          victory = False
      except:
        pass
      finally:
        s.close()

  if victory:
    broken_id = master_id
    master_id = self_id
    for (remote_id, addr) in server_list:
      if remote_id < self_id:
        try:
          s = socket.socket(socket.AF_INET6, socket.SOCK_STREAM)
          s.connect((addr, port))
          s.send("%%s, %%s" %% (self_id, "Victory"))

          slap = slapmodule.slap()
          slap.initializeConnection('%(server_url)s',
									'%(key_file)s'),
									'%(cert_file)s'))
          computer_partition = slap.registerComputerPartition('%(computer_id)s',
															  '%(partition_id)s'])
          broken = computer_partition.request('%(software)s',
											  '%(namebase)s%%s'%%broken_id,
											  None)
          broken.rename('broken%s'%%(random.randint(1,5000)))
          computer_partition.rename('%(namebase)s%%s'%%self_id)

        except:
          pass
        finally:
          s.close()


def failure_detect():
  while True:
    time.sleep(30)
    for (remote_id, addr) in server_list:
      if (remote_id == master_id):
        try:
          s = socket.socket(socket.AF_INET6, socket.SOCK_STREAM)
          s.connect((addr, port))
          s.close()
        except:
          s.close()
          election()

failure_detect_thread = threading.Thread(target=failure_detect)
failure_detect_thread.start()

s = socket.socket(socket.AF_INET6, socket.SOCK_STREAM)
s.bind(('', port))
s.listen(5)
election()
while True:
  force_election = False
  client, _ = s.accept()
  client_message = client.recv(1024)
  if client_message:
    client_id, message = client_message.split(', ')
    client_id = eval(client_id)
    if message == "Victory":
      master_id = client_id
      print "%%s wins" %% client_id
    elif message == "Election":
      print "%%s starts an election" %% client_id
      if client_id < self_id:
        client.send("%%s, %%s" %% (self_id, "Alive"))
        force_election = True
  client.close()
  if force_election:
    election()
