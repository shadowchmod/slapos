#!%(executable)s

import socket
import time
import sys
import thread
import time
import os

sys.path[:] = %(syspath)s

from slapos import slap as slapmodule

port = 50000
size = 1024


def rename_broken_and_stop():
  try:
    slap = slapmodule.slap()
    slap.initializeConnection('%(server_url)s',
                              '%(key_file)s',
                              '%(cert_file)s')
    computer_partition = slap.registerComputerPartition('%(computer_id)s',
                                                        '%(partition_id)s')
    broken = computer_partition.request('%(software)s', 'frozen', '%(namebase)s0')

    broken.rename('broken-%%s' %% (time.strftime("%%d-%%b_%%H:%%M:%%S", time.gmtime())))
    broken.stopped()
    computer_partition.rename('%(namebase)s0')
    print 'renaming done\n'
  except slapos.slap.slap.ServerError:
    print 'Internal server error\n'


## Leader is always number 0

class ResilientInstance(object):

    def __init__(self, comm):
        self.comm = comm
        self.id = 0
        self.state = 'normal'
        self.halter = 0
        self.nbComp = nbComp
        self.inElection = False
        self.alive = True
        self.lastPing = time.clock()

        self.mainCanal = self.comm.canal(['ping', 'halt',
                                          'victory'])

        self.okCanal = self.comm.canal(['ok'])
        self.loadConnectionInfos()


    def loadConnectionInfos(self):
        file = open('%(confpath)s', 'r')
        params = file.read().split('\n')
        file.close()
        self.nbComp = len([x.strip("' ") for x in params[0].strip('[],').split(',')])
        new_id = int(params[1])
        if self.id != new_id:
            self.halter = new_id
            self.id = new_id 

    ## Needs to be changed to use the master
    def aliveManagement(self):
        while self.alive:
            time.sleep(30*60)
            if self.id == 0:
                continue
            self.comm.send('ping', 0)
            message, sender = self.okCanal.get()
            if message:
                continue
            self.election()

    def listen(self):
        while self.alive:
            self.comm.recv()

    def main(self):
        while self.alive:
            message, sender = self.mainCanal.get()
            if message == 'ping':
                    self.comm.send('ok', sender)

            elif message == 'halt':
                self.state = 'waitingConfirm'
                self.halter = sender
                self.comm.send('ok', sender)

            elif message == 'victory':
                if int(sender) == int(self.halter) and self.state == 'waitingConfirm':
                    print '%s thinks %s is the leader\n' % (self.id, sender)
                    self.comm.send('ok', sender)
                self.state = 'normal'

    def election(self):
        self.inElection = True
        self.loadConnectionInfos()
        #Check if I'm the highest instance alive
        for higher in range(self.id + 1, self.nbComp):
            self.comm.send('ping', higher)
            message, sender = self.okCanal.get()
            if message:
                #print '%s is alive (%s)\n' % (higher, self.id)
                self.inElection = False
                return False
            continue

        if not self.alive:
            return False

        #I should be the new coordinator, halt those below me
        print 'Should be ME : %s \n' % self.id
        self.state = 'election'
        self.halter = self.id
        ups = []
        for lower in range(self.id):
            self.comm.send('halt', lower)
            message, sender = self.okCanal.get()
            if message:
                ups.append(lower)

        #Broadcast Victory
        self.state = 'reorganization'
        for up in ups:
            self.comm.send('victory', up)
            message, sender = self.okCanal.get()
            if message:
                continue
            print 'Something is wrong... let\'s start over\n'
            return self.election()
        self.state = 'normal'
        self.active = True
        print '%s Is THE LEADER \n' % self.id

        rename_broken_and_stop()

        self.inElection = False

        return True


class FilteredCanal(object):

    def __init__(self, accept, timeout):
        self.accept = accept
        self.list = []
        self.lock = thread.allocate_lock()
        self.timeout = timeout

    def append(self, message, sender):
        if message in self.accept:
            self.lock.acquire()
            self.list.append([message, sender])
            self.lock.release()

    def get(self):
        start = time.clock()
        while (time.clock() - start < self.timeout):
            self.lock.acquire()
            if self.list:
                self.lock.release()
                val = self.list[0]
                self.list = self.list[1:]
                return val
            self.lock.release()
        return [None, None]


class Wrapper(object):

    def __init__(self, timeout=20):
        self.read_pipes = [os.fdopen(x) for x in read_pipes]
        self.write_pipes = write_pipes
        self.canals = []
        self.ips = []
        self.id = 0
        self.timeout = timeout
        self.getConnectionInfos()
        self.socket = None

    def getConnectionInfos(self):
        file = open('%(confpath)s', 'r')
        params = file.read().split('\n')
        file.close()
        self.ips = [x.strip("' ") for x in params[0].strip('[],').split(',')]
        self.id = int(params[1])

    def start(self):
        self.getConnectionInfos()
        self.socket = socket.socket(socket.AF_INET6, socket.SOCK_STREAM)
        self.socket.bind((self.ips[self.id], port + self.id))
        s.listen(5)

    def send(self, message, number):
        self.getConnectionInfos()
        try:
            s = socket.socket(socket.AF_INET6, socket.SOCK_STREAM)
            s.connect((self.ips[number], port + number))
            s.send(message + (' %s\n' % self.id))
        except (socket.error, socket.herror, socket.gaierror, socket.timeout):
          pass
        finally:
            s.close()

    def canal(self, accept):
        created = FilteredCanal(accept, self.timeout)
        self.canals.append(created)
        return created

    def recv(self):
        client, _ = s.accept()
        client_message = client.recv(1024)
        if client_message:
            message, sender = client_message.split()
            for canal in self.canals:
                canal.append(message, sender)


wrapper = createWrapper(20)

computer = ResilientInstance(wrapper)

#idle waiting for connection infos
while computer.nbComp < 2 :
    computer.loadConnectionInfos()
    time.sleep(30)

print 'Starting\n'

computer.comm.start()
thread.start_new_thread(computer.listen, ())
thread.start_new_thread(computer.main, ())
thread.start_new_thread(computer.aliveManagement, ())

while True:
    continue


